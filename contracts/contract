// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import "@openzeppelin/contracts/access/Ownable.sol";
import "erc721a/contracts/ERC721A.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";


contract VampirestownNFT is ERC721A, Ownable, ReentrancyGuard {

    using Strings for uint256;
    

    uint256 price = 0.005 ether; //zrobić zmienną 0 ether zależną od total supply
    uint256 _maxSupply = 6666;
    uint256 maxMintAmountPerTx = 2; // zmienić na gdy zostanie granica free
    uint256 maxMintAmountPerWallet = 2; // zmienić na gdy zostanie granica free

    string baseURL = "";
    string ExtensionURL = ".json";
    


    
    
    bool paused = false;
    

    constructor(uint256 _price, uint256 __maxSupply, string memory _initBaseURI, uint256 _maxMintAmountPerTx, uint256 _maxMintAmountPerWallet) ERC721A("vampirestown", "VAMPIRE") {

        baseURL = _initBaseURI;
        price = _price;
        _maxSupply = __maxSupply;
        maxMintAmountPerTx = _maxMintAmountPerTx;
        maxMintAmountPerWallet = _maxMintAmountPerWallet;
        
        
        
    }

    // ================== Mint Function =======================

      function mint(address to, uint256 _mintAmount) public payable{
          require(!paused, "The contract is paused!");
          require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount!");
          require(totalSupply() + _mintAmount <= _maxSupply, "Max supply exceeded!");
          require(msg.value >= price * _mintAmount, "You dont have enough funds!");
          require(balanceOf(msg.sender) + _mintAmount <= maxMintAmountPerWallet, "Max mint per wallet exceeded!");
          
          
    
    

          _safeMint(to, _mintAmount);
      }
    // ================== Orange Functions (Owner Only) ===============

    function pause(bool state) public onlyOwner {
        paused = state;
    }

    function safeMint(address to, uint256 quantity) public onlyOwner {
        _safeMint(to, quantity);
    }
    
    function setbaseURL(string memory uri) public onlyOwner{
        baseURL = uri;
    }

    function setExtensionURL(string memory uri) public onlyOwner{
        ExtensionURL = uri;
    }

    function setCostPrice(uint256 _cost) public onlyOwner{
        price = _cost;
    } 

    function setSupply(uint256 supply) public onlyOwner{
        _maxSupply = supply;
    }
    
    // ================================ Withdraw Function ====================

    function withdraw() public onlyOwner nonReentrant{

        uint256 CurrentContractBalance = address(this).balance;
        (bool os, ) = payable(owner()).call{value: CurrentContractBalance}("");
        require(os);

    }

    // =================== Blue Functions (View Only) ====================

    function tokenURI(uint256 tokenId) public view override(ERC721A) returns (string memory){

        require(_exists(tokenId),"ERC721Metadata: URI query for nonexistent token");
        
        string memory currentBaseURI = _baseURI();
        return bytes(currentBaseURI).length > 0
            ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), ExtensionURL))
            : '';

    }

    function cost() public view returns (uint256){
        return price;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURL;
    }

    function maxSupply() public view returns (uint256){
        return _maxSupply;

    }  
}
